project(THINKFAN)
include(GNUInstallDirs)

cmake_minimum_required(VERSION 2.6)

# Generate absolute paths or something
cmake_policy(SET CMP0015 NEW)

#
# Defaults to OFF because libatasmart seems to be horribly inefficient
#
option(USE_ATASMART "Enable reading temperatures from HDDs via S.M.A.R.T" OFF)

#
# Defaults to ON because it seems reasonably fast. The libnvidia-ml.so is
# loaded at runtime, so we don't add a compile-time dependency on the
# proprietary nVidia driver.
#
option(USE_NVML "Get temperatures directly from nVidia GPUs via their \
proprietary NVML API" ON)

#
# The shiny new YAML config parser. Depends on yaml-cpp.
#
option(USE_YAML "Enable the new YAML-based config format" ON)


option(DISABLE_BUGGER "Disable bug detection, i.e. dont't catch segfaults \
    and unhandled exceptions" OFF)
option(DISABLE_SYSLOG "Disable logging to syslog, always log to stdout" OFF)
option(DISABLE_EXCEPTION_CATCHING "Terminate with SIGABRT on all exceptions, \
    causing a core dump on every error" OFF)


add_executable(thinkfan src/thinkfan.cpp src/config.cpp src/drivers.cpp
	src/message.cpp src/parser.cpp src/error.cpp src/yamlconfig.cpp)

#
# Set default build type
#
if(NOT CMAKE_BUILD_TYPE)
	set(CMAKE_BUILD_TYPE "Release" CACHE STRING "Choose the type of build,\
 options are: Debug Release RelWithDebInfo MinSizeRel."
		FORCE)
endif(NOT CMAKE_BUILD_TYPE)

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -std=c++1y")
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -O0 -g3 -DDEBUG")

if(MAXERR)
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DMAXERR=${MAXERR}")
endif(MAXERR)

if(USE_ATASMART)
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_ATASMART")
	target_link_libraries(thinkfan atasmart)
endif(USE_ATASMART)

if(USE_NVML)
	include_directories(AFTER "include")
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_NVML")
	target_link_libraries(thinkfan dl)
endif(USE_NVML)

if(USE_YAML)
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_YAML")
	#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -I/home/vmatare/devel/yaml-cpp/include -L/home/vmatare/devel/build-yaml-cpp-Desktop-Default")
	target_link_libraries(thinkfan yaml-cpp)
endif(USE_YAML)

if(DISABLE_BUGGER)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DDISABLE_BUGGER")
endif(DISABLE_BUGGER)
if(DISABLE_SYSLOG)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DDISABLE_SYSLOG")
endif(DISABLE_SYSLOG)
if(DISABLE_EXCEPTION_CATCHING)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DDISABLE_EXCEPTION_CATCHING")
endif(DISABLE_EXCEPTION_CATCHING)

find_package(PkgConfig)
pkg_check_modules(SYSTEMD "systemd")
pkg_check_modules(OPENRC "openrc")

install(TARGETS thinkfan DESTINATION "${CMAKE_INSTALL_SBINDIR}")
install(FILES COPYING README examples/thinkfan.conf.complex
	examples/thinkfan.conf.simple DESTINATION share/doc/thinkfan)
install(FILES src/thinkfan.1 DESTINATION share/man/man1)
install(FILES src/thinkfan.conf.5 DESTINATION share/man/man5)

if(SYSTEMD_FOUND)
	configure_file(rcscripts/systemd/thinkfan.service.cmake
		rcscripts/systemd/thinkfan.service)
	install(FILES
		    rcscripts/systemd/thinkfan-wakeup.service
		    "${CMAKE_BINARY_DIR}/rcscripts/systemd/thinkfan.service"
		DESTINATION lib/systemd/system)
	install(FILES rcscripts/systemd/00-thinkfan.conf
		DESTINATION "${CMAKE_INSTALL_SYSCONFDIR}/systemd/system/thinkfan.service.d")
endif(SYSTEMD_FOUND)

if(OPENRC_FOUND)
	install(FILES rcscripts/openrc/thinkfan DESTINATION /etc/init.d)
endif(OPENRC_FOUND)
